<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="jdbc:mysql://101.201.211.1:3336/hr?characterEncoding=utf8&amp;useSSL=false" />
        <property name="username" value="root" />
        <property name="password" value="Etcp2012@Etcp2012" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="50" />
        <property name="minIdle" value="50" />
        <property name="maxActive" value="100" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="3000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="5000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT now();" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="true" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j,wall" />

        <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->

        <!--DruidDataSource有一个属性timeBetweenLogStatsMillis，配置timeBetweenLogStatsMillis>0之后，DruidDataSource会定期把监控数据输出到日志中。-->
        <property name="timeBetweenLogStatsMillis" value="3600000" />

        <!--缺省多个DruidDataSource的监控数据是各自独立的，在Druid-0.2.17版本之后，支持配置公用监控数据，配置参数为useGloalDataSourceStat。例如：-->
        <!--<property name="useGlobalDataSourceStat" value="true" />-->

    </bean>

    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>cn.framework.db.init.*</value>
            </list>
        </property>
    </bean>

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

    <bean id="druidServlet" class="cn.framework.db.init.DruidServlet" />

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true" />
        <!--dataSourceLogEnabled	所有DataSource相关的日志-->
        <!--connectionLogEnabled	所有连接相关的日志-->
        <!--connectionLogErrorEnabled	所有连接上发生异常的日志-->
        <!--statementLogEnabled	所有Statement相关的日志-->
        <!--statementLogErrorEnabled	所有Statement发生异常的日志-->
        <!--resultSetLogEnabled-->
        <!--resultSetLogErrorEnabled-->
        <!--connectionConnectBeforeLogEnabled-->
        <!--connectionConnectAfterLogEnabled-->
        <!--connectionCommitAfterLogEnabled-->
        <!--connectionRollbackAfterLogEnabled-->
        <!--connectionCloseAfterLogEnabled-->
        <!--statementCreateAfterLogEnabled-->
        <!--statementPrepareAfterLogEnabled-->
        <!--statementPrepareCallAfterLogEnabled-->
        <!--statementExecuteAfterLogEnabled-->
        <!--statementExecuteQueryAfterLogEnabled-->
        <!--statementExecuteUpdateAfterLogEnabled-->
        <!--statementExecuteBatchAfterLogEnabled-->
        <!--statementCloseAfterLogEnabled-->
        <!--statementParameterSetLogEnabled-->
        <!--resultSetNextAfterLogEnabled-->
        <!--resultSetOpenAfterLogEnabled-->
        <!--resultSetCloseAfterLogEnabled-->
        <property name="dataSourceLogEnabled" value="true" />
        <property name="connectionLogEnabled" value="true" />
        <property name="connectionLogErrorEnabled" value="true" />
        <property name="statementLogEnabled" value="true" />
    </bean>
</beans>